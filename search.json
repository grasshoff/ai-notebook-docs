[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AI Notebook Documentation",
    "section": "",
    "text": "1 Introduction\nWelcome to the AI Notebook documentation. This guide introduces you to a comprehensive ecosystem of AI-powered tools for academic research and document processing.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "AI Notebook Documentation",
    "section": "1.1 Overview",
    "text": "1.1 Overview\nAI Notebook is part of a larger AI Universe that includes:\n\nAI Notebook: Core document processing with AI-enhanced blocks\nAI Views: Visualization and interactive dashboards\nAI Audio: Speech processing and transcription",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#key-features",
    "href": "index.html#key-features",
    "title": "AI Notebook Documentation",
    "section": "1.2 Key Features",
    "text": "1.2 Key Features\n\nMulti-model integration (Claude, Gemini, GPT-4, etc.)\nTemplate-based analysis\nCross-reference system\nAudio transcription with speaker detection\nInteractive visualizations\nGitHub Pages integration",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "AI Notebook Documentation",
    "section": "1.3 Getting Started",
    "text": "1.3 Getting Started\n\n1.3.1 Installation\npip install ainotebook\n\n\n1.3.2 Basic Usage\nCreate a new notebook with AI-enhanced blocks:\nfrom ainotebook import AINotebook\n\n# Initialize and process a notebook\nnotebook = AINotebook(\"analysis.qmd\")\nnotebook.process()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#documentation-structure",
    "href": "index.html#documentation-structure",
    "title": "AI Notebook Documentation",
    "section": "1.4 Documentation Structure",
    "text": "1.4 Documentation Structure\n\nAI Universe: Overview of the complete AI toolset ecosystem\nAI Ensemble: How components work together\nAI Models: Available models and their capabilities\nAI Notebook: Core functionality and features\nGitHub Pages: Documentation publishing guide\nUser Guide: Practical examples and best practices\nAPI Documentation: Complete reference for developers",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#direct-file-processing",
    "href": "index.html#direct-file-processing",
    "title": "AI Notebook Documentation",
    "section": "4.1 1. Direct File Processing",
    "text": "4.1 1. Direct File Processing\nfrom ainotebook import AINotebook\n\n# Initialize and process a file\nnotebook = AINotebook(\"your_notebook.qmd\")\nnotebook.process()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#manual-setup",
    "href": "index.html#manual-setup",
    "title": "AI Notebook Documentation",
    "section": "4.2 2. Manual Setup",
    "text": "4.2 2. Manual Setup\nfrom ainotebook import AINotebook\n\n# Initialize without a file\nnotebook = AINotebook(debug=True)  # Enable debug mode for verbose output\n\n# Later process a file\nnotebook.parse_file(\"your_notebook.qmd\")\nnotebook.process()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#directory-structure",
    "href": "index.html#directory-structure",
    "title": "AI Notebook Documentation",
    "section": "4.3 Directory Structure",
    "text": "4.3 Directory Structure\nAI Notebook expects the following directory structure:\nyour_project/\n├── sources/        # Templates and source files\n├── process/        # Processing results\n└── ai-views/       # Generated views\nYou can customize these paths in settings.json.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html#text-processing",
    "href": "index.html#text-processing",
    "title": "AI Notebook Documentation",
    "section": "5.1 Text Processing",
    "text": "5.1 Text Processing\nCreate a QMD file with AI blocks:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "01-AI-Universe.html",
    "href": "01-AI-Universe.html",
    "title": "2  AI Universe",
    "section": "",
    "text": "2.1 Grundlegende Konzepte und Struktur",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>AI Universe</span>"
    ]
  },
  {
    "objectID": "01-AI-Universe.html#grundlegende-konzepte-und-struktur",
    "href": "01-AI-Universe.html#grundlegende-konzepte-und-struktur",
    "title": "2  AI Universe",
    "section": "",
    "text": "2.1.1 Definition und Rolle\nDas AI-Universum stellt ein umfassendes Ökosystem für die akademische Forschung und Dokumentenverarbeitung dar, in dem das AI Notebook eine zentrale Rolle einnimmt. Diese Infrastruktur vereint verschiedene KI-Modelle, Verarbeitungsprozesse und spezialisierte Werkzeuge zu einer leistungsfähigen Wissensumgebung.\n\n\n\nAI Universe\n\n\n\n\n2.1.2 AI Notebooks und Akteure\nAI Notebooks operieren als Komponenten innerhalb eines Verbunds von AI-Akteuren. Diese verarbeiten Eingangsdaten gemäß definierter Instruktionen durch spezifische Verfahren zu konkreten Ergebnissen. Die grundlegenden Operationen dieser AI-Akteure bilden das Fundament des AI-Universums. Ein AI Notebook bündelt verschiedene Ausführungssequenzen und verbindet dabei narrativen Text mit ausführbaren KI-Anweisungen. Diese Anweisungen fungieren als übergeordnete Steuerungsebene und bestimmen die Ausführungsparameter der jeweiligen AI-Akteure.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>AI Universe</span>"
    ]
  },
  {
    "objectID": "01-AI-Universe.html#organisationsstruktur",
    "href": "01-AI-Universe.html#organisationsstruktur",
    "title": "2  AI Universe",
    "section": "2.2 Organisationsstruktur",
    "text": "2.2 Organisationsstruktur\n\n2.2.1 Notebook-Architektur\nDie Struktur eines AI Notebooks organisiert die Ausführungssequenzen der AI-Akteure in einer kohärenten Form. In der Basisvariante koordiniert es die prozessuale Abfolge mehrerer AI-Akteure. Fortgeschrittene Implementierungen ermöglichen die Integration von Akteuren aus anderen Notebook-Verbünden oder übergeordneten Strukturen.\n\n\n2.2.2 Ensemble-Organisation\nDie Organisation in AI-Ensembles bündelt thematisch oder funktional verwandte Notebooks in größeren Einheiten. Diese Ensembles repräsentieren spezifische Arbeitsabläufe, Forschungsprojekte oder funktionale Gruppierungen, wobei ihre interne Struktur flexibel gestaltbar bleibt.\n\n\n2.2.3 Referenzierungssystem\nDie Referenzierung externer Akteure erfolgt über ein präzises Benennungssystem. Die etablierte Nomenklatur des AI-Universums gewährleistet die eindeutige Identifikation aller Systemkomponenten. Diese hierarchische Strukturierung ermöglicht die kontextbezogene Adressierung jedes Akteurs durch spezifische AI-Referenzen.\n\n\n2.2.4 Funktionen der AI-Referenzen\nEine AI-Referenz erfüllt zwei zentrale Funktionen: Sie kann einerseits Verarbeitungsergebnisse eines Akteurs basierend auf dessen Eingabedaten im inferentiellen Kontext reproduzieren. Andererseits ermöglicht sie Meta-Operationen, bei denen ein AI-Akteur als strukturelle Vorlage dient. Dies erlaubt beispielsweise die Replikation einer spezifischen Operation nach dem Vorbild von “Akteur 3 aus Notebook 4 der Ensemble-Gruppe 5 der AI University 1”. Dieser Mechanismus fördert die methodische Transparenz und erleichtert die adaptive Nutzung bewährter Lösungsansätze.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>AI Universe</span>"
    ]
  },
  {
    "objectID": "01-AI-Universe.html#institutionelle-integration",
    "href": "01-AI-Universe.html#institutionelle-integration",
    "title": "2  AI Universe",
    "section": "2.3 Institutionelle Integration",
    "text": "2.3 Institutionelle Integration\n\n2.3.1 Institutionelle Einbettung\nDie institutionelle Ebene vereint multiple Ensembles unter dem Dach von Universitäten, staatlichen Bildungseinrichtungen, Stiftungen, Museen, Archiven, Akademien, Max-Planck-Instituten und weiteren Forschungseinrichtungen. Diese Institutionen gewährleisten die Zugänglichkeit und Nachnutzbarkeit ihrer Forschungsergebnisse innerhalb der wissenschaftlichen Gemeinschaft.\n\n\n2.3.2 Offene Zusammenarbeit\nDer institutionelle Verbund steht auch privatwirtschaftlichen Akteuren wie Unternehmen und Startups offen, wobei die Prinzipien des freien wissenschaftlichen Austauschs und der allgemeinen Zugänglichkeit gewahrt bleiben. Diese Struktur verhindert monopolistische Kontrolle und fördert den offenen Wissensaustausch in der Tradition akademischer Zusammenarbeit.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>AI Universe</span>"
    ]
  },
  {
    "objectID": "02-AI-Ensemble.html",
    "href": "02-AI-Ensemble.html",
    "title": "3  AI Ensemble",
    "section": "",
    "text": "3.1 Grundlegende Konzepte und Struktur",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>AI Ensemble</span>"
    ]
  },
  {
    "objectID": "02-AI-Ensemble.html#grundlegende-konzepte-und-struktur",
    "href": "02-AI-Ensemble.html#grundlegende-konzepte-und-struktur",
    "title": "3  AI Ensemble",
    "section": "",
    "text": "3.1.1 Definition und Rolle\nEin AI-Ensemble stellt eine funktionale Gruppierung von AI-Notebooks dar, die thematisch oder methodisch zusammengehören. Diese Ensembles bilden die mittlere Organisationsebene zwischen einzelnen Notebooks und institutionellen Strukturen. Sie ermöglichen die systematische Bündelung von Forschungsaktivitäten und Verarbeitungsprozessen.\n\n\n3.1.2 Organisation und Aufbau\nDie interne Struktur eines Ensembles orientiert sich an den spezifischen Anforderungen des jeweiligen Anwendungsbereichs. Typische Organisationsformen umfassen:\n\nThematische Gruppierung nach Forschungsgebieten\nMethodische Strukturierung nach Verarbeitungsprozessen\nFunktionale Gliederung nach Aufgabenbereichen\nHierarchische Anordnung nach Komplexitätsgraden\n\n\n\n3.1.3 Interaktion und Vernetzung\nAI-Ensembles ermöglichen die Vernetzung und Koordination ihrer Notebooks durch:\n\nGemeinsame Ressourcennutzung\nStandardisierte Schnittstellen\nEinheitliche Referenzierungssysteme\nIntegrierte Qualitätssicherung",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>AI Ensemble</span>"
    ]
  },
  {
    "objectID": "02-AI-Ensemble.html#components",
    "href": "02-AI-Ensemble.html#components",
    "title": "3  AI Ensemble",
    "section": "3.2 Components",
    "text": "3.2 Components\n\n3.2.1 Text Processing\n\nDocument analysis\nContent extraction\nSemantic processing\nCross-referencing\n\n\n\n3.2.2 Audio Processing\n\nSpeech transcription\nSpeaker detection\nAudio segmentation\nTimestamp alignment\n\n\n\n3.2.3 AI Models\n\nMultiple provider support\nModel selection\nTemplate-based prompting\nResult aggregation",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>AI Ensemble</span>"
    ]
  },
  {
    "objectID": "03-AI-Models.html",
    "href": "03-AI-Models.html",
    "title": "4  AI Models",
    "section": "",
    "text": "4.1 Anthropic Models\nAI Notebook supports multiple AI models from various providers for both text and audio processing.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Models</span>"
    ]
  },
  {
    "objectID": "03-AI-Models.html#anthropic-models",
    "href": "03-AI-Models.html#anthropic-models",
    "title": "4  AI Models",
    "section": "",
    "text": "claude-3-opus (175K context)\nclaude-3-sonnet (200K context)\nclaude-3-haiku (200K context)\nclaude-haiku (alias for claude-3-haiku)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Models</span>"
    ]
  },
  {
    "objectID": "03-AI-Models.html#google-models",
    "href": "03-AI-Models.html#google-models",
    "title": "4  AI Models",
    "section": "4.2 Google Models",
    "text": "4.2 Google Models\n\ngemini-pro (alias for gemini-1.5-pro)\ngemini-2 (alias for gemini-2.0-flash-exp)\ngemini-2-thinking (alias for gemini-2.0-flash-thinking-exp-01-21)\ngemini-2-pro (alias for gemini-2.0-pro-exp-02-05)\ngemini-audio (alias for gemini-2.0-pro-exp-02-05, optimized for audio transcription)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Models</span>"
    ]
  },
  {
    "objectID": "03-AI-Models.html#openai-models",
    "href": "03-AI-Models.html#openai-models",
    "title": "4  AI Models",
    "section": "4.3 OpenAI Models",
    "text": "4.3 OpenAI Models\n\ngpt-4\ngpt-4-turbo\ngpt-3.5-turbo",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Models</span>"
    ]
  },
  {
    "objectID": "03-AI-Models.html#groq-models",
    "href": "03-AI-Models.html#groq-models",
    "title": "4  AI Models",
    "section": "4.4 Groq Models",
    "text": "4.4 Groq Models\n\nmixtral-8x7b-32768\nllama2-70b-4096\ndeepseek (alias for deepseek-r1-distill-qwen-32b)\ngroq-deepseek (alias for deepseek-r1-distill-llama-70b)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Models</span>"
    ]
  },
  {
    "objectID": "03-AI-Models.html#audio-models",
    "href": "03-AI-Models.html#audio-models",
    "title": "4  AI Models",
    "section": "4.5 Audio Models",
    "text": "4.5 Audio Models\n\nwhisper (alias for whisper-large-v3)\nwhisper-turbo (alias for whisper-large-v3-turbo)\ngemini-audio (Gemini 2.0 model optimized for audio transcription)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Models</span>"
    ]
  },
  {
    "objectID": "03-AI-Models.html#local-models-via-ollama",
    "href": "03-AI-Models.html#local-models-via-ollama",
    "title": "4  AI Models",
    "section": "4.6 Local Models (via Ollama)",
    "text": "4.6 Local Models (via Ollama)\nAny model available in your local Ollama installation.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Models</span>"
    ]
  },
  {
    "objectID": "04-AI-Notebook.html",
    "href": "04-AI-Notebook.html",
    "title": "5  AI Notebook",
    "section": "",
    "text": "5.1 Blocks\nCore functionality and features of the AI Notebook system.\nThe document comprises three distinct types of text blocks:\nFor all other textual elements and formatting requirements, the full range of Quarto markdown syntax is available to enhance the document’s presentation and structure.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>AI Notebook</span>"
    ]
  },
  {
    "objectID": "04-AI-Notebook.html#blocks",
    "href": "04-AI-Notebook.html#blocks",
    "title": "5  AI Notebook",
    "section": "",
    "text": "Standard text formatted in Quarto markdown, which supports LaTeX mathematical notation and advanced scholarly features such as footnotes, bibliographies and citations.\nYAML configuration blocks, demarcated by “—” delimiters, which can appear either independently or within AI instruction blocks.\nAI instruction blocks, which begin with three backticks followed by “ai” (ai) and conclude with three backticks ().",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>AI Notebook</span>"
    ]
  },
  {
    "objectID": "04-AI-Notebook.html#example-ai-blocks",
    "href": "04-AI-Notebook.html#example-ai-blocks",
    "title": "5  AI Notebook",
    "section": "5.2 Example AI Blocks",
    "text": "5.2 Example AI Blocks\n\n5.2.1 Basic Analysis\n---\nmodel: gemini-2.0-flash-exp\npreamble: Gebe ohne preamble nur die antwort auf die Frage.\ntitle: processor\n---\nGebe die Lebensdaten des Preussenkönigs Friedrich II aus. Füge die Lebensdaten\nvon Leonhard Euler hinzu und gebe die Daten an, wann Euler in Preußen und St.\nPetersburg war.\n\n\n5.2.2 Multiple Blocks\n---\nmodel: gemini-2.0-flash-exp\nprocessing: False\n---\nMit wem war Euler verheiratet? Gebe alle Frauen und die Daten von Hochzeit bis zum Tod an.\n\n\n5.2.3 Template Usage\n---\nmodel: gemini-2.0-flash-exp\npreamble: Gebe ohne preamble nur die antwort auf die Frage\nprocessing: False\n---\nGebe eine Liste der ersten 20 Primzahlen aus.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>AI Notebook</span>"
    ]
  },
  {
    "objectID": "04-AI-Notebook.html#implementation-details",
    "href": "04-AI-Notebook.html#implementation-details",
    "title": "5  AI Notebook",
    "section": "5.3 Implementation Details",
    "text": "5.3 Implementation Details\n\n5.3.1 Python Class Structure\nThe AI Notebook implementation consists of a main Python class that:\n\nImports notebooks in UTF-8 text format\nParses blocks and their configurations\nExecutes code blocks\nInserts execution results\nGenerates new notebooks with results\n\n\n\n5.3.2 Configuration Handling\n\nYAML blocks are parsed into a dictionary\nKeys are processed in sequential order\nLater definitions override earlier ones\nTemplates use Jinja2 syntax with variable interpolation\n\n\n\n```ai\n---\nmodel: gemini-2.0-flash-exp\nprocessing: False\n---\nMit wem war Euler verheiratet? Gebe alle Frauen und die Daten von Hochzeit bis zum Tod an.\n---\nmodel: gemini-2.0-flash-exp\npreamble: Gebe ohne preamble nur die antwort auf die Frage\nprocessing: False\n---\nGebe eine Liste der ersten 20 Primzahlen aus.\n---\nmodel: claude-3-5-haiku\npreamble: Gebe ohne preamble nur die antwort auf die Frage\n---\nÜbersetze ins English: Du unterirdischer Idiot.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>AI Notebook</span>"
    ]
  },
  {
    "objectID": "05-GitHub-Pages.html",
    "href": "05-GitHub-Pages.html",
    "title": "6  Setting up GitHub Pages",
    "section": "",
    "text": "6.1 Prerequisites\nThis guide provides step-by-step instructions for setting up GitHub Pages for any ai-views directory, including creating individual SSH keys for repository access.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Setting up GitHub Pages</span>"
    ]
  },
  {
    "objectID": "05-GitHub-Pages.html#prerequisites",
    "href": "05-GitHub-Pages.html#prerequisites",
    "title": "6  Setting up GitHub Pages",
    "section": "",
    "text": "Git installed on your system\nGitHub account\nBasic familiarity with terminal commands\nAccess to the ai-views directory you want to publish",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Setting up GitHub Pages</span>"
    ]
  },
  {
    "objectID": "05-GitHub-Pages.html#step-1-create-ssh-key",
    "href": "05-GitHub-Pages.html#step-1-create-ssh-key",
    "title": "6  Setting up GitHub Pages",
    "section": "6.2 Step 1: Create SSH Key",
    "text": "6.2 Step 1: Create SSH Key\nEach ai-views directory should have its own SSH key for secure GitHub access:\nssh-keygen -t ed25519 -C \"friedrichstr@studio-3\" -f ~/.ssh/id_rsa_ai_notebook\nWhen prompted: 1. The key path is already specified in the command (-f option) 2. Enter a passphrase (recommended) or press Enter twice for no passphrase",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Setting up GitHub Pages</span>"
    ]
  },
  {
    "objectID": "05-GitHub-Pages.html#step-2-add-key-to-github",
    "href": "05-GitHub-Pages.html#step-2-add-key-to-github",
    "title": "6  Setting up GitHub Pages",
    "section": "6.3 Step 2: Add Key to GitHub",
    "text": "6.3 Step 2: Add Key to GitHub\n\nCopy the public key:\ncat ~/.ssh/id_rsa_ai_notebook.pub\nGo to GitHub.com and log in\nClick your profile photo → Settings\nSelect “SSH and GPG keys”\nClick “New SSH key”\nGive it a descriptive title (e.g., “AI Notebook”)\nPaste the public key content\nClick “Add SSH key”",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Setting up GitHub Pages</span>"
    ]
  },
  {
    "objectID": "05-GitHub-Pages.html#step-3-test-connection",
    "href": "05-GitHub-Pages.html#step-3-test-connection",
    "title": "6  Setting up GitHub Pages",
    "section": "6.4 Step 3: Test Connection",
    "text": "6.4 Step 3: Test Connection\nVerify the SSH connection:\nssh -T git@github.com\nYou should see a message like:\nHi username! You've successfully authenticated, but GitHub does not provide shell access.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Setting up GitHub Pages</span>"
    ]
  },
  {
    "objectID": "05-GitHub-Pages.html#step-4-configure-repository",
    "href": "05-GitHub-Pages.html#step-4-configure-repository",
    "title": "6  Setting up GitHub Pages",
    "section": "6.5 Step 4: Configure Repository",
    "text": "6.5 Step 4: Configure Repository\n\nNavigate to your documentation directory:\ncd docu\nInitialize Git:\ngit init\ngit branch -M main\nAdd and commit your files:\ngit add .\ngit commit -m \"Initial documentation setup\"\nAdd remote (replace ‘username’ with your GitHub username):\ngit remote add origin git@github.com:username/ai-notebook.git",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Setting up GitHub Pages</span>"
    ]
  },
  {
    "objectID": "05-GitHub-Pages.html#step-5-enable-github-pages",
    "href": "05-GitHub-Pages.html#step-5-enable-github-pages",
    "title": "6  Setting up GitHub Pages",
    "section": "6.6 Step 5: Enable GitHub Pages",
    "text": "6.6 Step 5: Enable GitHub Pages\n\nPush your repository to GitHub:\ngit push -u origin main\nGo to repository settings on GitHub:\n\nNavigate to Settings → Pages\nUnder “Source”, select:\n\nBranch: main\nFolder: /docs",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Setting up GitHub Pages</span>"
    ]
  },
  {
    "objectID": "05-GitHub-Pages.html#step-6-deploy-documentation",
    "href": "05-GitHub-Pages.html#step-6-deploy-documentation",
    "title": "6  Setting up GitHub Pages",
    "section": "6.7 Step 6: Deploy Documentation",
    "text": "6.7 Step 6: Deploy Documentation\n\nEnsure you’re in the documentation directory:\ncd docu\nBuild the documentation site:\nquarto render\nAdd the generated files:\ngit add _site/*\ngit commit -m \"Add generated documentation site\"\nPush the changes:\ngit push origin main\nVerify deployment:\n\nWait a few minutes for GitHub Pages to build\nVisit https://username.github.io/ai-notebook\nIf needed, check the Actions tab on GitHub for build status",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Setting up GitHub Pages</span>"
    ]
  },
  {
    "objectID": "06-User-Guide.html",
    "href": "06-User-Guide.html",
    "title": "7  User Guide",
    "section": "",
    "text": "7.1 Basic Usage\nA comprehensive guide to using AI Notebook with practical examples and best practices.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>User Guide</span>"
    ]
  },
  {
    "objectID": "06-User-Guide.html#basic-usage",
    "href": "06-User-Guide.html#basic-usage",
    "title": "7  User Guide",
    "section": "",
    "text": "7.1.1 Text Analysis\nfrom ainotebook import AINotebook\n\n# Initialize notebook\nnotebook = AINotebook(\"analysis.qmd\")\n\n# Process the notebook\nnotebook.process()\n\n\n7.1.2 Audio Processing\nfrom ainotebook import process_audio\n\n# Basic transcription\ntranscript = process_audio(\n    \"recording.mp3\",\n    model=\"gemini-audio\",\n    language=\"en\"\n)\n\n# Advanced usage with speaker detection\ntranscript = process_audio(\n    \"interview.mp3\",\n    model=\"gemini-audio\",\n    speakers=True,\n    speaker_count=2\n)",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>User Guide</span>"
    ]
  },
  {
    "objectID": "06-User-Guide.html#template-usage",
    "href": "06-User-Guide.html#template-usage",
    "title": "7  User Guide",
    "section": "7.2 Template Usage",
    "text": "7.2 Template Usage\nTemplates allow you to structure your AI prompts consistently:\nfrom ainotebook import AINotebook\n\nnotebook = AINotebook(\"analysis.qmd\", template_dir=\"templates\")\nnotebook.process()",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>User Guide</span>"
    ]
  },
  {
    "objectID": "06-User-Guide.html#project-organization",
    "href": "06-User-Guide.html#project-organization",
    "title": "7  User Guide",
    "section": "7.3 Project Organization",
    "text": "7.3 Project Organization\nA typical AI Notebook project structure:\nproject/\n├── notebooks/\n│   ├── analysis.qmd\n│   └── results.qmd\n├── templates/\n│   └── analysis.j2\n├── sources/\n│   └── data/\n├── process/\n└── ai-views/\nFor more detailed information about specific features, please refer to the API Documentation section.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>User Guide</span>"
    ]
  },
  {
    "objectID": "07-API.html",
    "href": "07-API.html",
    "title": "8  Template Block",
    "section": "",
    "text": "8.1 Label References\nYour instruction text here\nLabels can be referenced within the same notebook or across notebooks:\nExample:",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Template Block</span>"
    ]
  },
  {
    "objectID": "07-API.html#label-references",
    "href": "07-API.html#label-references",
    "title": "8  Template Block",
    "section": "",
    "text": "Same notebook: {label_name}\nCross-notebook: {notebook:label_name}\n\n\n```ai\n---\nmodel: claude-sonnet\n---\nCompare:\n1. Current Analysis: {{current_analysis}}\n2. Historical Context: {{history:context}}\n\n## Audio Processing\n\n### Command Line Interface\n\nThe `aiaudio` command provides a flexible interface for audio transcription with template support:\n\n```bash\naiaudio [OPTIONS] FILE\n\nArguments:\n  FILE                      Audio file to transcribe\n\nOptions:\n  --model MODEL             Model to use (default: gemini-audio)\n  --language LANG          Language of the audio (default: en)\n  --speakers              Enable speaker detection\n  --speaker-count COUNT    Expected number of speakers\n  --template NAME         Template name to use (e.g., basic, detailed, transcribe)\n  --template-var KEY VALUE Template variables (can be used multiple times)\n  --list-templates        List available templates\n  --create-templates      Create default templates in ~/.ai/templates/audio\n  --template-path PATH    Additional path to look for templates\n  --overwrite            Overwrite existing output files\n  --output PATH          Output file path (default: process/input_file_audio.json)\n  --debug                Enable debug output\n  --version              Show version information\n\n8.1.0.1 Basic Usage Examples\n\nSimple Transcription:\n\n# Basic transcription with default settings (English, no speaker detection)\naiaudio recording.mp3\n\n# German transcription\naiaudio recording.mp3 --language de\n\n# Using a specific model\naiaudio recording.mp3 --model whisper\n\nSpeaker Detection:\n\n# Enable speaker detection with 2 speakers\naiaudio interview.mp3 --speakers --speaker-count 2\n\n# German transcription with speaker detection\naiaudio interview.mp3 --language de --speakers --speaker-count 3\n\nUsing Templates:\n\n# Use transcribe template with speaker detection\naiaudio lecture.mp3 --template transcribe --speakers --speaker-count 2\n\n# Detailed template with custom variables\naiaudio lecture.mp3 --template detailed \\\n  --template-var domain \"physics\" \\\n  --template-var format \"technical\"\n\nOutput Control:\n\n# Custom output location\naiaudio recording.mp3 --output transcripts/result.json\n\n# Force overwrite existing file\naiaudio interview.mp3 --overwrite\n\n# Combine output options\naiaudio lecture.mp3 --output results/transcript.json --overwrite\n\nDebug and Template Management:\n\n# Show debug information\naiaudio recording.mp3 --debug\n\n# List available templates\naiaudio --list-templates\n\n# List templates with debug info\naiaudio --list-templates --debug\n\n# Create default templates\naiaudio --create-templates\n\n\n8.1.0.2 Output File Handling\nBy default, transcription results are saved in a process directory next to the input file: - Input file: path/to/example.mp3 - Default output: path/to/process/example_audio.json\nYou can control output handling in two ways: 1. Specify custom output path: --output path/to/output.json 2. Control overwriting: --overwrite flag\nIf an output file already exists and --overwrite is not specified, the command will exit with an error message:\nOutput file already exists: example_audio.json\nUse --overwrite to replace existing file\n\n\n8.1.0.3 Template Variables\nTemplates can access the following built-in variables: - language: The language specified (default: “en”) - speakers: Boolean indicating if speaker detection is enabled - speaker_count: Number of expected speakers (if speakers=True)\nCustom variables can be added using --template-var:\naiaudio recording.mp3 --template transcribe \\\n  --template-var format \"technical\" \\\n  --template-var timestamps \"true\"\n\n\n8.1.0.4 Debug Output\nUsing --debug shows detailed information about: - File paths and locations - Template search paths - Template variables - The exact prompt being sent to the model - Processing configuration - Progress updates\nExample debug output:\naiaudio recording.mp3 --template transcribe --debug\n\nPaths:\n  Input: /absolute/path/to/recording.mp3\n  Process dir: /absolute/path/to/process\n  Output: /absolute/path/to/process/recording_audio.json\n\nSearching for templates in:\n  - /Users/username/.ai/templates\n  - /Users/username/.ai/templates/audio\n\nTemplate variables:\n  language: en\n  speakers: false\n  speaker_count: null\n\nProcessing configuration:\n  model: gemini-2.0-pro-exp-02-05\n  language: en\n  speakers: false\n  template: transcribe\n\n\n8.1.0.5 Template Locations\nTemplates are searched in the following order: 1. ~/.ai/templates/audio/ (user-specific) 2. .ai/templates/audio/ (project-specific) 3. templates/audio/ (local) 4. Custom paths specified via --template-path\n\n\n8.1.1 Template Management\n\n8.1.1.1 Listing Templates\nUse --list-templates to see available templates:\n$ aiaudio --list-templates\n\nAvailable templates:\n===================\nIn ~/.ai/templates/audio:\n  - basic\n  - detailed\n\n# With debug information\n$ aiaudio --list-templates --debug\nAvailable templates:\n===================\nIn ~/.ai/templates/audio:\n  - basic\n    Full path: /Users/username/.ai/templates/audio/basic.j2\n  - detailed\n    Full path: /Users/username/.ai/templates/audio/detailed.j2\n\n\n8.1.1.2 Creating Default Templates\nInitialize the default templates:\n$ aiaudio --create-templates\nCreated default templates in ~/.ai/templates/audio\nThis creates two default templates: - basic.j2: Simple transcription with basic formatting - detailed.j2: Detailed transcription with speaker detection and timestamps\n\n\n\n8.1.2 Python API\nThe audio processing functionality can be accessed programmatically:\nfrom ainotebook import process_audio\n\n# Basic transcription\ntranscript = process_audio(\n    \"lecture.mp3\",\n    model=\"gemini-audio\",\n    language=\"en\"\n)\n\n# Advanced usage with template\ntranscript = process_audio(\n    \"interview.mp3\",\n    model=\"gemini-audio\",\n    template=\"detailed\",\n    template_vars={\n        \"focus\": \"technical_terms\",\n        \"timestamps\": True,\n        \"domain\": \"physics\"\n    },\n    speakers=True,\n    speaker_count=2,\n    debug=True  # Enable debug output\n)\n\n\n8.1.3 Template System\n\n8.1.3.1 Template Locations\nTemplates are searched in the following order: 1. ~/.ai/templates/audio/ (user-specific) 2. .ai/templates/audio/ (project-specific) 3. templates/audio/ (local) 4. Custom paths specified via --template-path\n\n\n8.1.3.2 Default Templates\n\nBasic Template (basic.j2):\n\nTranscribe the following audio file with these specifications:\nLanguage: {{language}}\n{% if speakers %}\nDetect speakers: Yes\nNumber of speakers: {{speaker_count}}\n{% endif %}\n\nAdditional instructions:\n- Maintain original punctuation\n- Include speaker labels if detected\n- Note unclear segments\n\nDetailed Template (detailed.j2):\n\nPerform a detailed transcription of the audio with:\nLanguage: {{language}}\n{% if speakers %}\nSpeaker detection enabled\nExpected speakers: {{speaker_count}}\n{% endif %}\n\nFocus on:\n- Accurate speaker attribution\n- Emotional tone and emphasis\n- Background sounds and context\n- Technical terminology precision\n- Time-stamped segments\n\n\n\n8.1.4 Template Variables\n\n8.1.4.1 Built-in Variables\n\nlanguage: Audio language (default: “en”)\nspeakers: Speaker detection flag (boolean)\nspeaker_count: Number of expected speakers (integer)\n\n\n\n8.1.4.2 Custom Variables\nAdd custom variables using: - CLI: --template-var KEY VALUE - Python: template_vars dictionary\nExample template using custom variables:\n{# technical.j2 #}\nPerform technical transcription with focus on:\nLanguage: {{language}}\nDomain: {{domain|default('general')}}\nTimestamp Interval: {{timestamp_interval|default(30)}} seconds\n\n{% if technical_terms %}\nTechnical Terms Focus:\n- Preserve specialized vocabulary\n- Mark uncertain technical terms\n- Note mathematical formulas\n{% endif %}\n\n\n\n8.1.5 Best Practices\n\nTemplate Organization\n\nStore user-specific templates in ~/.ai/templates/audio/\nKeep project-specific templates in .ai/templates/audio/\nUse clear, descriptive template names\n\nTemplate Design\n\nInclude clear documentation in templates\nUse Jinja2 defaults for optional variables\nKeep templates focused and modular\n\nError Handling\n\nUse --debug for troubleshooting\nCheck template paths when templates aren’t found\nVerify template variables are being passed correctly\n\nPerformance\n\nChoose appropriate models for the task\nUse speaker detection only when needed\nConsider template complexity impact on processing time",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Template Block</span>"
    ]
  },
  {
    "objectID": "07-API.html#visualization",
    "href": "07-API.html#visualization",
    "title": "8  Template Block",
    "section": "8.2 Visualization",
    "text": "8.2 Visualization\n\n8.2.1 Dashboard Creation\n\n\n\n:::{#quarto-navigation-envelope .hidden}\n[AI Notebook Documentation]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyLXRpdGxl\"}\n[AI Notebook Documentation]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1uYXZiYXItdGl0bGU=\"}\n[&lt;span class='chapter-number'&gt;7&lt;/span&gt;  &lt;span class='chapter-title'&gt;User Guide&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1wcmV2\"}\n[&lt;span class='chapter-number'&gt;1&lt;/span&gt;  &lt;span class='chapter-title'&gt;Introduction&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOi9pbmRleC5odG1sPHNwYW4tY2xhc3M9J2NoYXB0ZXItbnVtYmVyJz4xPC9zcGFuPi0tPHNwYW4tY2xhc3M9J2NoYXB0ZXItdGl0bGUnPkludHJvZHVjdGlvbjwvc3Bhbj4=\"}\n[&lt;span class='chapter-number'&gt;2&lt;/span&gt;  &lt;span class='chapter-title'&gt;AI Universe&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOi8wMS1BSS1Vbml2ZXJzZS5odG1sPHNwYW4tY2xhc3M9J2NoYXB0ZXItbnVtYmVyJz4yPC9zcGFuPi0tPHNwYW4tY2xhc3M9J2NoYXB0ZXItdGl0bGUnPkFJLVVuaXZlcnNlPC9zcGFuPg==\"}\n[&lt;span class='chapter-number'&gt;3&lt;/span&gt;  &lt;span class='chapter-title'&gt;AI Ensemble&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOi8wMi1BSS1FbnNlbWJsZS5odG1sPHNwYW4tY2xhc3M9J2NoYXB0ZXItbnVtYmVyJz4zPC9zcGFuPi0tPHNwYW4tY2xhc3M9J2NoYXB0ZXItdGl0bGUnPkFJLUVuc2VtYmxlPC9zcGFuPg==\"}\n[&lt;span class='chapter-number'&gt;4&lt;/span&gt;  &lt;span class='chapter-title'&gt;AI Models&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOi8wMy1BSS1Nb2RlbHMuaHRtbDxzcGFuLWNsYXNzPSdjaGFwdGVyLW51bWJlcic+NDwvc3Bhbj4tLTxzcGFuLWNsYXNzPSdjaGFwdGVyLXRpdGxlJz5BSS1Nb2RlbHM8L3NwYW4+\"}\n[&lt;span class='chapter-number'&gt;5&lt;/span&gt;  &lt;span class='chapter-title'&gt;AI Notebook&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOi8wNC1BSS1Ob3RlYm9vay5odG1sPHNwYW4tY2xhc3M9J2NoYXB0ZXItbnVtYmVyJz41PC9zcGFuPi0tPHNwYW4tY2xhc3M9J2NoYXB0ZXItdGl0bGUnPkFJLU5vdGVib29rPC9zcGFuPg==\"}\n[&lt;span class='chapter-number'&gt;6&lt;/span&gt;  &lt;span class='chapter-title'&gt;Setting up GitHub Pages&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOi8wNS1HaXRIdWItUGFnZXMuaHRtbDxzcGFuLWNsYXNzPSdjaGFwdGVyLW51bWJlcic+Njwvc3Bhbj4tLTxzcGFuLWNsYXNzPSdjaGFwdGVyLXRpdGxlJz5TZXR0aW5nLXVwLUdpdEh1Yi1QYWdlczwvc3Bhbj4=\"}\n[&lt;span class='chapter-number'&gt;7&lt;/span&gt;  &lt;span class='chapter-title'&gt;User Guide&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOi8wNi1Vc2VyLUd1aWRlLmh0bWw8c3Bhbi1jbGFzcz0nY2hhcHRlci1udW1iZXInPjc8L3NwYW4+LS08c3Bhbi1jbGFzcz0nY2hhcHRlci10aXRsZSc+VXNlci1HdWlkZTwvc3Bhbj4=\"}\n[&lt;span class='chapter-number'&gt;8&lt;/span&gt;  &lt;span class='chapter-title'&gt;Template Block&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWludC1zaWRlYmFyOi8wNy1BUEkuaHRtbDxzcGFuLWNsYXNzPSdjaGFwdGVyLW51bWJlcic+ODwvc3Bhbj4tLTxzcGFuLWNsYXNzPSdjaGFwdGVyLXRpdGxlJz5UZW1wbGF0ZS1CbG9jazwvc3Bhbj4=\"}\n[&lt;span class='chapter-number'&gt;8&lt;/span&gt;  &lt;span class='chapter-title'&gt;Template Block&lt;/span&gt;]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLWJyZWFkY3J1bWJzLTxzcGFuLWNsYXNzPSdjaGFwdGVyLW51bWJlcic+ODwvc3Bhbj4tLTxzcGFuLWNsYXNzPSdjaGFwdGVyLXRpdGxlJz5UZW1wbGF0ZS1CbG9jazwvc3Bhbj4=\"}\n\n:::{.hidden .quarto-markdown-envelope-contents render-id=\"Zm9vdGVyLWNlbnRlcg==\"}\nCopyright 2025, Gerd Graßhoff\n:::\n\n\n:::{.hidden .quarto-markdown-envelope-contents render-id=\"bWFyZ2luLWhlYWRlcg==\"}\n\n:::{.margin-header-item}\n0\n:::\n\n:::\n\n:::\n\n\n\n:::{#quarto-meta-markdown .hidden}\n[[8]{.chapter-number}  [Template Block]{.chapter-title} – AI Notebook Documentation]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW1ldGF0aXRsZQ==\"}\n[[8]{.chapter-number}  [Template Block]{.chapter-title} – AI Notebook Documentation]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLXR3aXR0ZXJjYXJkdGl0bGU=\"}\n[[8]{.chapter-number}  [Template Block]{.chapter-title} – AI Notebook Documentation]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW9nY2FyZHRpdGxl\"}\n[AI Notebook Documentation]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW1ldGFzaXRlbmFtZQ==\"}\n[]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLXR3aXR0ZXJjYXJkZGVzYw==\"}\n[]{.hidden .quarto-markdown-envelope-contents render-id=\"cXVhcnRvLW9nY2FyZGRkZXNj\"}\n:::\n\n\n\n\n&lt;!-- --&gt;\n\n::: {.quarto-embedded-source-code}\n```````````````````{.markdown shortcodes=\"false\"}\nYour instruction text here\n\n### Template Block\n\n```yaml\n```ai\n---\nmodel: model_name\ntemplate: template_name.j2\nfiles:\n  var_name: file_path\n---\n\n### Multi-Template Block\n\n```yaml\n```ai\n---\nmodel: model_name\ntemplate:\n  - file: template1.j2\n    variables:\n      VAR1: value1\n  - file: template2.j2\n    variables:\n      VAR2: value2\n---\n\n## Templates\n\nTemplates use Jinja2 syntax and support:\n\n- Variable interpolation: `{ variable }`\n- Control structures: `{% if condition %}...{% endif %}`\n- Loops: `{% for item in items %}...{% endfor %}`\n- Filters: `{ text | upper }`\n- Macros and includes\n\nExample template:\n\n```jinja\n{# analysis_template.j2 #}\nAnalyze the following text using {{style}} approach:\n\n{{text}}\n\nFocus on:\n{% for point in focus_points %}\n- {{point}}\n{% endfor %}\n\nAdditional context:\n{{context | default('No additional context provided')}}",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Template Block</span>"
    ]
  },
  {
    "objectID": "07-API.html#label-references-1",
    "href": "07-API.html#label-references-1",
    "title": "8  Template Block",
    "section": "8.3 Label References",
    "text": "8.3 Label References\nLabels can be referenced within the same notebook or across notebooks:\n\nSame notebook: {label_name}\nCross-notebook: {notebook:label_name}\n\nExample:\n```ai\n---\nmodel: claude-sonnet\n---\nCompare:\n1. Current Analysis: {{current_analysis}}\n2. Historical Context: {{history:context}}\n\n## Audio Processing\n\n### Command Line Interface\n\nThe `aiaudio` command provides a flexible interface for audio transcription with template support:\n\n```bash\naiaudio [OPTIONS] FILE\n\nArguments:\n  FILE                      Audio file to transcribe\n\nOptions:\n  --model MODEL             Model to use (default: gemini-audio)\n  --language LANG          Language of the audio (default: en)\n  --speakers              Enable speaker detection\n  --speaker-count COUNT    Expected number of speakers\n  --template NAME         Template name to use (e.g., basic, detailed, transcribe)\n  --template-var KEY VALUE Template variables (can be used multiple times)\n  --list-templates        List available templates\n  --create-templates      Create default templates in ~/.ai/templates/audio\n  --template-path PATH    Additional path to look for templates\n  --overwrite            Overwrite existing output files\n  --output PATH          Output file path (default: process/input_file_audio.json)\n  --debug                Enable debug output\n  --version              Show version information\n\n8.3.0.1 Basic Usage Examples\n\nSimple Transcription:\n\n# Basic transcription with default settings (English, no speaker detection)\naiaudio recording.mp3\n\n# German transcription\naiaudio recording.mp3 --language de\n\n# Using a specific model\naiaudio recording.mp3 --model whisper\n\nSpeaker Detection:\n\n# Enable speaker detection with 2 speakers\naiaudio interview.mp3 --speakers --speaker-count 2\n\n# German transcription with speaker detection\naiaudio interview.mp3 --language de --speakers --speaker-count 3\n\nUsing Templates:\n\n# Use transcribe template with speaker detection\naiaudio lecture.mp3 --template transcribe --speakers --speaker-count 2\n\n# Detailed template with custom variables\naiaudio lecture.mp3 --template detailed \\\n  --template-var domain \"physics\" \\\n  --template-var format \"technical\"\n\nOutput Control:\n\n# Custom output location\naiaudio recording.mp3 --output transcripts/result.json\n\n# Force overwrite existing file\naiaudio interview.mp3 --overwrite\n\n# Combine output options\naiaudio lecture.mp3 --output results/transcript.json --overwrite\n\nDebug and Template Management:\n\n# Show debug information\naiaudio recording.mp3 --debug\n\n# List available templates\naiaudio --list-templates\n\n# List templates with debug info\naiaudio --list-templates --debug\n\n# Create default templates\naiaudio --create-templates\n\n\n8.3.0.2 Output File Handling\nBy default, transcription results are saved in a process directory next to the input file: - Input file: path/to/example.mp3 - Default output: path/to/process/example_audio.json\nYou can control output handling in two ways: 1. Specify custom output path: --output path/to/output.json 2. Control overwriting: --overwrite flag\nIf an output file already exists and --overwrite is not specified, the command will exit with an error message:\nOutput file already exists: example_audio.json\nUse --overwrite to replace existing file\n\n\n8.3.0.3 Template Variables\nTemplates can access the following built-in variables: - language: The language specified (default: “en”) - speakers: Boolean indicating if speaker detection is enabled - speaker_count: Number of expected speakers (if speakers=True)\nCustom variables can be added using --template-var:\naiaudio recording.mp3 --template transcribe \\\n  --template-var format \"technical\" \\\n  --template-var timestamps \"true\"\n\n\n8.3.0.4 Debug Output\nUsing --debug shows detailed information about: - File paths and locations - Template search paths - Template variables - The exact prompt being sent to the model - Processing configuration - Progress updates\nExample debug output:\naiaudio recording.mp3 --template transcribe --debug\n\nPaths:\n  Input: /absolute/path/to/recording.mp3\n  Process dir: /absolute/path/to/process\n  Output: /absolute/path/to/process/recording_audio.json\n\nSearching for templates in:\n  - /Users/username/.ai/templates\n  - /Users/username/.ai/templates/audio\n\nTemplate variables:\n  language: en\n  speakers: false\n  speaker_count: null\n\nProcessing configuration:\n  model: gemini-2.0-pro-exp-02-05\n  language: en\n  speakers: false\n  template: transcribe\n\n\n8.3.0.5 Template Locations\nTemplates are searched in the following order: 1. ~/.ai/templates/audio/ (user-specific) 2. .ai/templates/audio/ (project-specific) 3. templates/audio/ (local) 4. Custom paths specified via --template-path\n\n\n8.3.1 Template Management\n\n8.3.1.1 Listing Templates\nUse --list-templates to see available templates:\n$ aiaudio --list-templates\n\nAvailable templates:\n===================\nIn ~/.ai/templates/audio:\n  - basic\n  - detailed\n\n# With debug information\n$ aiaudio --list-templates --debug\nAvailable templates:\n===================\nIn ~/.ai/templates/audio:\n  - basic\n    Full path: /Users/username/.ai/templates/audio/basic.j2\n  - detailed\n    Full path: /Users/username/.ai/templates/audio/detailed.j2\n\n\n8.3.1.2 Creating Default Templates\nInitialize the default templates:\n$ aiaudio --create-templates\nCreated default templates in ~/.ai/templates/audio\nThis creates two default templates: - basic.j2: Simple transcription with basic formatting - detailed.j2: Detailed transcription with speaker detection and timestamps\n\n\n\n8.3.2 Python API\nThe audio processing functionality can be accessed programmatically:\nfrom ainotebook import process_audio\n\n# Basic transcription\ntranscript = process_audio(\n    \"lecture.mp3\",\n    model=\"gemini-audio\",\n    language=\"en\"\n)\n\n# Advanced usage with template\ntranscript = process_audio(\n    \"interview.mp3\",\n    model=\"gemini-audio\",\n    template=\"detailed\",\n    template_vars={\n        \"focus\": \"technical_terms\",\n        \"timestamps\": True,\n        \"domain\": \"physics\"\n    },\n    speakers=True,\n    speaker_count=2,\n    debug=True  # Enable debug output\n)\n\n\n8.3.3 Template System\n\n8.3.3.1 Template Locations\nTemplates are searched in the following order: 1. ~/.ai/templates/audio/ (user-specific) 2. .ai/templates/audio/ (project-specific) 3. templates/audio/ (local) 4. Custom paths specified via --template-path\n\n\n8.3.3.2 Default Templates\n\nBasic Template (basic.j2):\n\nTranscribe the following audio file with these specifications:\nLanguage: {{language}}\n{% if speakers %}\nDetect speakers: Yes\nNumber of speakers: {{speaker_count}}\n{% endif %}\n\nAdditional instructions:\n- Maintain original punctuation\n- Include speaker labels if detected\n- Note unclear segments\n\nDetailed Template (detailed.j2):\n\nPerform a detailed transcription of the audio with:\nLanguage: {{language}}\n{% if speakers %}\nSpeaker detection enabled\nExpected speakers: {{speaker_count}}\n{% endif %}\n\nFocus on:\n- Accurate speaker attribution\n- Emotional tone and emphasis\n- Background sounds and context\n- Technical terminology precision\n- Time-stamped segments\n\n\n\n8.3.4 Template Variables\n\n8.3.4.1 Built-in Variables\n\nlanguage: Audio language (default: “en”)\nspeakers: Speaker detection flag (boolean)\nspeaker_count: Number of expected speakers (integer)\n\n\n\n8.3.4.2 Custom Variables\nAdd custom variables using: - CLI: --template-var KEY VALUE - Python: template_vars dictionary\nExample template using custom variables:\n{# technical.j2 #}\nPerform technical transcription with focus on:\nLanguage: {{language}}\nDomain: {{domain|default('general')}}\nTimestamp Interval: {{timestamp_interval|default(30)}} seconds\n\n{% if technical_terms %}\nTechnical Terms Focus:\n- Preserve specialized vocabulary\n- Mark uncertain technical terms\n- Note mathematical formulas\n{% endif %}\n\n\n\n8.3.5 Best Practices\n\nTemplate Organization\n\nStore user-specific templates in ~/.ai/templates/audio/\nKeep project-specific templates in .ai/templates/audio/\nUse clear, descriptive template names\n\nTemplate Design\n\nInclude clear documentation in templates\nUse Jinja2 defaults for optional variables\nKeep templates focused and modular\n\nError Handling\n\nUse --debug for troubleshooting\nCheck template paths when templates aren’t found\nVerify template variables are being passed correctly\n\nPerformance\n\nChoose appropriate models for the task\nUse speaker detection only when needed\nConsider template complexity impact on processing time",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Template Block</span>"
    ]
  },
  {
    "objectID": "07-API.html#visualization-1",
    "href": "07-API.html#visualization-1",
    "title": "8  Template Block",
    "section": "8.4 Visualization",
    "text": "8.4 Visualization\n\n8.4.1 Dashboard Creation\n\n:::",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Template Block</span>"
    ]
  }
]